# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Decode Base64 to data"


class Input:
    BASE64 = "base64"
    ERRORS = "errors"
    

class State:
    LAST_EVENT_ID = "last_event_id"
    LAST_EVENT_TIME = "last_event_time"
    LAST_RUN_TIME = "last_run_time"
    

class Output:
    DATA = "data"
    

class TestTaskInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "base64": {
      "type": "string",
      "title": "Base64",
      "displayType": "bytes",
      "description": "Data to decode",
      "format": "bytes",
      "order": 1
    },
    "errors": {
      "type": "string",
      "title": "Errors",
      "description": "How errors should be handled when decoding Base64",
      "default": "nothing",
      "enum": [
        "replace",
        "ignore",
        "nothing"
      ],
      "order": 2
    }
  },
  "required": [
    "base64"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class TestTaskState(insightconnect_plugin_runtime.State):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "last_event_id": {
      "type": "integer",
      "title": "Last Event ID",
      "description": "The identifier of the last retrieved event",
      "order": 2
    },
    "last_event_time": {
      "type": "string",
      "title": "Last Event Time",
      "description": "The datetime of the last retrieved event",
      "order": 1
    },
    "last_run_time": {
      "type": "string",
      "title": "Last Run Time",
      "description": "The time of the last time events were retrieved",
      "order": 3
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class TestTaskOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "data": {
      "type": "string",
      "title": "Decoded Data",
      "description": "Decoded data result",
      "order": 1
    }
  },
  "required": [
    "data"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
